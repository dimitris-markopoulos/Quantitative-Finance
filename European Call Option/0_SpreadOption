{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Exotic Derivatives Pricing using MC - Spread Option"
      ],
      "metadata": {
        "id": "6KPMnFeutFdV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "FWZJFnDS5tJL"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part A - Antithetical Sampling"
      ],
      "metadata": {
        "id": "sI8akDjoiO6U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Defined the functions simulateS1 and simulateS2 which generate two arrays of paths; size = n ."
      ],
      "metadata": {
        "id": "XwSKSMbQmgGx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def simulateS1(S0, mu, v, q, T, n): #parameters for asset 1\n",
        "  rng = np.random.default_rng() #set generator PCG64\n",
        "  Z1 = rng.normal(loc=0.0, scale=1, size=n) #nx1 array of standard normal random variables\n",
        "  antitheticalZ1 = np.array([Z1,-Z1])\n",
        "  ST = S0 * np.exp((mu-q-(v**2)/2)*T + v*np.sqrt(T)*antitheticalZ1)\n",
        "  return ST\n",
        "\n",
        "def simulateS2(S0, mu, v, q, T, rho, n): #parameters for asset 2\n",
        "  rng = np.random.default_rng() #set generator PCG64\n",
        "  Z = rng.normal(loc=0.0, scale=1, size=(2,n)) #nx1 array of standard normal random variables\n",
        "  antitheticalsample = np.array([Z, -Z])\n",
        "  Z1 = np.array([antitheticalsample[0][0], antitheticalsample[1][0]])\n",
        "  Z2 = np.array([antitheticalsample[0][1], antitheticalsample[1][1]])\n",
        "  ST = S0 * np.exp((mu-q-(v**2)/2)*T + rho * v * Z1 * np.sqrt(T) + np.sqrt(1-rho**2)*v*Z2*np.sqrt(T))\n",
        "  return ST"
      ],
      "metadata": {
        "id": "brD0iIFhALu-"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Simulate the payoff of all paths $\\max[{S0 - S1 - K, 0}]$ then discount by factor $\\exp[{-rT}]$ to PV.  Take the mean of all these and this gives valuation."
      ],
      "metadata": {
        "id": "QEysRc40nMEN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sim_option_price(S0_1, S0_2, mu_1, mu_2, v1, v2, q1, q2, K, T, rho, r, n): #both paths should have same # of paths so I have only included n (as opposed to n1,n2)\n",
        "    \"\"\"Standard Antithetic Sampling\"\"\"\n",
        "    S1 = simulateS1(S0 = S0_1, mu = mu_1, v = v1, q = q1, T = T, n = n)\n",
        "    S2 = simulateS2(S0 = S0_2, mu = mu_2, v = v2, q = q2, T = T, rho = rho, n = n)\n",
        "    payoff = np.maximum(S1 - S2 - K, 0)\n",
        "    disc_payoffs = np.exp(-r * T) * payoff\n",
        "    sim_price = np.mean(disc_payoffs)\n",
        "    err_bound = 1.96 * disc_payoffs.std(ddof=1)/np.sqrt(n)\n",
        "    sim_price, err_bound\n",
        "    return [sim_price, err_bound]"
      ],
      "metadata": {
        "id": "0OxU0bbXK0tG"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The $(1-\\alpha)100\\%$ Confidence Interval between all the discounted payoffs is easily calculated using the error bound in the function sim_option_price."
      ],
      "metadata": {
        "id": "O18ftrS3vvFu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "conf = sim_option_price(S0_1 = 300, S0_2 = 100, mu_1 = 0.02, mu_2 = 0.03, v1 = 0.10, v2 = 0.15, q1 = 0.0, q2 = 0.0, K = 10, T = 1, rho = 0.80, r = 0.05, n = 100000)\n",
        "CI = (round(conf[0] - conf[1], 4), round(conf[0] + conf[1], 4))\n",
        "print(f'95% Confidence Interval : {CI}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_tultYI1vw1O",
        "outputId": "b73d9cda-ca06-48ec-fbb7-099fb5321177"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "95% Confidence Interval : (183.3972, 183.8035)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part A - Msc."
      ],
      "metadata": {
        "id": "c1LXc5Wvu3qe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Distribution of Payoffs"
      ],
      "metadata": {
        "id": "0wowShZ6sUuS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Below is a visualization of the distribution of payoffs for all 2n paths that we have generated in the MC simulation.  We now seek to find a CI for this distribution."
      ],
      "metadata": {
        "id": "KfoCQjqOsm87"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def DiscPayoff(S0_1, S0_2, mu_1, mu_2, v1, v2, q1, q2, K, T, rho, r, n): #both paths should have same # of paths so I have only included n (as opposed to n1,n2)\n",
        "    \"\"\"Standard Antithetic Sampling\"\"\"\n",
        "    S1 = simulateS1(S0 = S0_1, mu = mu_1, v = v1, q = q1, T = T, n = n)\n",
        "    S2 = simulateS2(S0 = S0_2, mu = mu_2, v = v2, q = q2, T = T, rho = rho, n = n)\n",
        "    payoff = np.maximum(S1 - S2 - K, 0)\n",
        "    disc_payoffs = np.exp(-r * T) * payoff\n",
        "    return disc_payoffs\n",
        "\n",
        "dist = DiscPayoff(S0_1 = 300, S0_2 = 100, mu_1 = 0.02, mu_2 = 0.03, v1 = 0.10, v2 = 0.15, q1 = 0.0, q2 = 0.0, K = 10, T = 1, rho = 0.80, r = 0.05, n = 10000)\n",
        "plt.hist(np.concatenate([dist[0],dist[1]]),bins = 100, color = 'orange');\n",
        "plt.title(f'Discounted Payoff for n Paths');\n",
        "plt.xlabel('Discounted Payoff Price');\n",
        "plt.ylabel('Frequency');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "KATwBreposVp",
        "outputId": "4cb3cbc1-4730-4883-924a-ba040314a4a1"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can also find the distribution of the option prices."
      ],
      "metadata": {
        "id": "jjysLUQHuYBn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def dist_optionprices(S0_1, S0_2, mu_1, mu_2, v1, v2, q1, q2, K, T, rho, r, n, N): # Return a array of N prices simulated\n",
        "    prices = []\n",
        "    for i in range(N):\n",
        "        price = sim_option_price(S0_1, S0_2, mu_1, mu_2, v1, v2, q1, q2, K, T, rho, r, n)\n",
        "        prices.append(price[0])\n",
        "    return np.array(prices)"
      ],
      "metadata": {
        "id": "b4WrxOjSuYU6"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## Function to simulate N option prices (where each option price it the mean of 2n stock paths for S1 and S2 w/ Antithetic Sampling)\n",
        "\n",
        "def plotdist_optionprices(S0_1, S0_2, mu_1, mu_2, v1, v2, q1, q2, K, T, rho, r, n, N): # Return a plot\n",
        "    prices = []\n",
        "    for i in range(N):\n",
        "        price = sim_option_price(S0_1, S0_2, mu_1, mu_2, v1, v2, q1, q2, K, T, rho, r, n)\n",
        "        prices.append(price[0])\n",
        "\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.hist(prices, bins=100, color='red')\n",
        "    ax.set_title('Distribution of Spread Option Prices')\n",
        "    ax.set_xlabel('Price')\n",
        "    ax.set_ylabel('Frequency')\n",
        "    ax.axvline(np.mean(prices), color='black', label=f'Mean = {np.mean(prices):.2f}')\n",
        "    ax.legend()\n",
        "\n",
        "#Example\n",
        "\n",
        "plotdist_optionprices(S0_1 = 300, S0_2 = 100, mu_1 = 0.02, mu_2 = 0.03, v1 = 0.10, v2 = 0.15, q1 = 0.0, q2 = 0.0, K = 10, T = 1, rho = 0.80, r = 0.05, n = 10000, N = 10000)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "5NqgJA8UubCr",
        "outputId": "93d58f9d-fc32-4918-f758-0186e0cfcb57"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}